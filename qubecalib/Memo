パッケージを抽象化レイヤー毎に分割して，自分の該当する API を選びすくする
eqikit: 装置に密着した層．ドライバよりも少し抽象化したもの．出力や波形の校正を司る
engkit: 冷凍機までの配線や共振周波数，装置の周波数配分や帯域配分などを定義するエンジニア向けの API
scikit: Qubit に与える波形を定義したり実験を記述するサイエンティスト向けの API
gtekit: ゲートレベルのシーケンスを定義したりアルゴリズムを記述するプログラマ向けの API（将来構想）




lf = LineConnection(source, destination)

q4 = TxChannel

class LogicalLine(object) # WeveSeqを共通にするグループ

Source.center_freq_mhz ソースの中心周波数を返す

namedtuple BandWidth(band_width_mhz, offset_mhz)
namedtuple LineConnection(destination, source)

class QubeSetup(ElectronicsSetup)

qs = engkit.QubeSetup(
    line_connection=[
        LineConnection('Q4', qube.port5),
    ],
)

ll = qs.lines['Q4'].logical_lines
ll[0].fc_mhz
ll[0].fmin_mhz
ll[0].fmax_mhz
ll[0].init(channels=[cq4])

lq4=qs.line['Q4'].init(channels={},wave_sequence_factory=WaveSequence1CFactory())
qs.lines['Q4'].init(
  ll[0].init(channels={'Q4CR', TxChannel()},), 
)

t, iq = lq4.channel['Q4'].wsf.waveform


